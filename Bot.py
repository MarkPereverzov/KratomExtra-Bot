from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes, ApplicationBuilder,ConversationHandler, MessageHandler,filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import sqlite3
import logging
from config import TOKEN

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.ERROR)

logger = logging.getLogger(__name__)

variety_dict = {
    "UA":["Maeng da –ë—ñ–ª–∏–π", "Maeng da –ó–µ–ª–µ–Ω–∏–π", "Maeng da –ß–µ—Ä–≤–æ–Ω–∏–π", "–¢–∞–π—Å—å–∫–∏–π –∑–µ–ª–µ–Ω–∏–π", "–ë–æ—Ä–Ω–µ–æ —á–µ—Ä–≤–æ–Ω–∏–π", "–ë—ñ–ª–∏–π –°–ª–æ–Ω", "–®–∏–≤–∞", "White Honey", "–ë–æ–≥–∏–Ω—è –ö–∞–ª—ñ", "Golden Dragon"]
}
gramms_list = ["10–≥","25–≥","50–≥","100–≥","1–∫–≥"]

def gen_regex(list):
    st = "^("
    first = True
    for variety in list:
        if first:
            st+=variety
            first = False
        else:
            st+=f"|{variety}"
    st += ")$"
    return st

ORDER,VARIETY, GRAMMS, COUNT,PACKAGE = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üìù –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",], ["üìÉ –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "üó£Ô∏è –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é",]],one_time_keyboard=True,input_field_placeholder="–°–æ—Ä—Ç",resize_keyboard=True)
    await context.bot.send_message(update.effective_chat.id, '–í–∞—Å –≤—ñ—Ç–∞—î Kratom Ukraine —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç üëã\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –æ–Ω–ª–∞–π–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –Ω–∞—à —á–∞–π üå±',reply_markup=reply_markup)
    return ORDER

async def make_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    options_matrix = [
        ["üå± Maeng da –ë—ñ–ª–∏–π", "üå± Maeng da –ó–µ–ª–µ–Ω–∏–π"],
        ["üå± Maeng da –ß–µ—Ä–≤–æ–Ω–∏–π", "üå± –¢–∞–π—Å—å–∫–∏–π –∑–µ–ª–µ–Ω–∏–π"],
        ["üå± –ë–æ—Ä–Ω–µ–æ —á–µ—Ä–≤–æ–Ω–∏–π", "üå± –ë—ñ–ª–∏–π –°–ª–æ–Ω"],
        ["üå± –®–∏–≤–∞", "üå± White Honey"],
        ["üå± –ë–æ–≥–∏–Ω—è –ö–∞–ª—ñ", "üå± Golden Dragon"],
    ]
    reply_markup = ReplyKeyboardMarkup(options_matrix,one_time_keyboard=True,input_field_placeholder="–°–æ—Ä—Ç",resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id,text='–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ä—Ç',reply_markup=reply_markup)
    return VARIETY

async def variety_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    options_matrix = [["10–≥","25–≥"],["50–≥","100–≥"],["1–∫–≥"]]
    reply_markup = ReplyKeyboardMarkup(options_matrix,one_time_keyboard=True,resize_keyboard=True)
    user = update.message.from_user
    variety = update.message.text
    if variety == "–ü—Ä–æ–±–Ω–∏–π –Ω–∞–±—ñ—Ä":
        return PACKAGE
    logger.info("%s selected variety : %s", user.first_name, variety)
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–≥—É —É–ø–∞–∫–æ–≤–∫–∏",
        reply_markup=reply_markup,
    )
    return GRAMMS

async def gramms_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    gramms = update.message.text
    logger.info("%s selected %s gramms", user.first_name, gramms)
    await update.message.reply_text(
        "–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–ø–∞–∫–æ–≤–æ–∫",
        reply_markup=ReplyKeyboardRemove(),
    )
    return PACKAGE
    
async def package_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"]],one_time_keyboard=True,resize_keyboard=True)
    package = update.message.text
    user = update.message.from_user
    logger.info("%s selected %s package", user.first_name, package)
    await update.message.reply_text(
        "–©–∏—Ä–æ –¥—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        reply_markup=reply_markup,
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(update.effective_chat.id, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ')

app = ApplicationBuilder().token(TOKEN).build()
#app.add_handler(CommandHandler(["start","hello"], start))
#app.add_handler(CommandHandler(["order","make_order"], make_order))
app.add_handler(ConversationHandler(
        entry_points=[CommandHandler(["start","hello"], start),MessageHandler(filters.Regex("^(–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è)$"),make_order)],
        states={
            ORDER: [MessageHandler(filters.TEXT,make_order)], #Regex("^(–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è)$"
            VARIETY: [MessageHandler(filters.Regex(gen_regex(variety_dict["UA"])), variety_select)],
            GRAMMS: [MessageHandler(filters.Regex(gen_regex(gramms_list)), gramms_select)],
            PACKAGE: [MessageHandler(filters.Regex("^[0-9]+$"),package_select)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
)
app.run_polling()