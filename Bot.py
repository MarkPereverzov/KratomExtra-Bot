from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes, ApplicationBuilder,ConversationHandler, MessageHandler,filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from sqlalchemy import select, and_, or_
import logging
import time
from bottoken import TOKEN
from classes import User,OrderElements,Orders

SRC_PATH = "D:\\KratomUkraine-Bot\\"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.ERROR)

logger = logging.getLogger(__name__)

variety_dict = {
    "UA":["Maeng da –ë—ñ–ª–∏–π", "Maeng da –ó–µ–ª–µ–Ω–∏–π", "Maeng da –ß–µ—Ä–≤–æ–Ω–∏–π", "–¢–∞–π—Å—å–∫–∏–π –∑–µ–ª–µ–Ω–∏–π","–ë–æ—Ä–Ω–µ–æ —á–µ—Ä–≤–æ–Ω–∏–π", "–ë—ñ–ª–∏–π –°–ª–æ–Ω","–®–∏–≤–∞", "White Honey", "–ë–æ–≥–∏–Ω—è –ö–∞–ª—ñ", "Golden Dragon"]
}
start_reply_markup = ReplyKeyboardMarkup([["üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", "üìú –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",], ["üìò –ö–∞—Ç–∞–ª–æ–≥", "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–∏",]],one_time_keyboard=True,input_field_placeholder="–°–æ—Ä—Ç",resize_keyboard=True)
gramms_list = ["10 –≥", "25 –≥", "50 –≥", "100 –≥", "1 –∫–≥"]
choose_type_list = ["–†–æ–∑—Å–∏–ø–Ω–∏–π","–ö–∞–ø—Å—É–ª–∏","–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç","–ü—Ä–æ–±–Ω–∏–π –Ω–∞–±—ñ—Ä"]
menu_list = ["üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", "üìú –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è","üìò –ö–∞—Ç–∞–ª–æ–≥", "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–∏"]
local_or_delivery_list = ["üö∂ –°–∞–º–æ–≤–∏–≤—ñ–∑", "üöö –î–æ—Å—Ç–∞–≤–∫–∞"]
post_type_list= ["–ü–æ—á—Ç–æ–º–∞—Ç","–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"]
contact_info = "–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç–∏ —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é: –í—É–ª. 12 –ö–≤—ñ—Ç–Ω—è, –±—É–¥–∏–Ω–æ–∫ 3"

engine = create_engine(f"sqlite+pysqlite:///{SRC_PATH}database.db", echo=True)

def gen_regex(list):
    st = "^("
    first = True
    for variety in list:
        if first:
            st+=variety
            first = False
        else:
            st+=f"|{variety}"
    st += ")$"
    return st

LOCALORDELIVERY,ORDER_CORRECT,TEA,HELP,MYORDER,CHECK,TYPE,ORDER,VARIETY, GRAMMS, COUNT,PACKAGE, ASSORTMENT,PERSONAL_INFO,PERSONAL_SURNAME,PERSONAL_PHONE,PERSONAL_CITY,PERSONAL_POST_TYPE,PERSONAL_POST_TYPE_CHOOSE,PERSONAL_INFO_CORRECT,PERSONAL_POST_NUMBER,ASK_UPDATE_PERSONAL,ONE_MORE = range(23)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(update.effective_chat.id, '–í–∞—Å –≤—ñ—Ç–∞—î Kratom Ukraine —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç.üëã\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –æ–Ω–ª–∞–π–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –Ω–∞—à —á–∞–π üå±',reply_markup=start_reply_markup)
    context.user_data["ordersid"] = 0
    with Session(engine) as session:
        uid = update.message.from_user.id
        if session.query(User.id).where(User.userid.in_([str(uid)])).first()[0] == None:
            session.add(User(userid=str(uid)))
            session.commit()
    return CHECK

async def myorder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–¶–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:",
        reply_markup=start_reply_markup,
    )
    return ConversationHandler.END

async def assortment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –Ω–∞—à–æ–≥–æ —á–∞—é üå±",
        reply_markup=start_reply_markup,
    )

async def check_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    option = update.message.text
    if option == menu_list[0]:
        return myorder(update,context)
    elif option == menu_list[1]:
        return await choose_type(update,context)
    elif option == menu_list[2]:
        return assortment(update,context) 

async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["–†–æ–∑—Å–∏–ø–Ω–∏–π","–ö–∞–ø—Å—É–ª–∏"],["–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç","–ü—Ä–æ–±–Ω–∏–π –Ω–∞–±—ñ—Ä"]],one_time_keyboard=True,resize_keyboard=True)
    await context.bot.send_message(update.effective_chat.id, 'üì¶ –û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É —Ñ–æ—Ä–º—É –ø–∞–∫—É–≤–∞–Ω–Ω—è',reply_markup=reply_markup)
    return TEA

async def choose_tea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    type = update.message.text
    context.user_data["type"] = type
    logger.info("%s TYPE", type)
    options_matrix = [
        ["Maeng da –ë—ñ–ª–∏–π", "Maeng da –ó–µ–ª–µ–Ω–∏–π"],
        ["Maeng da –ß–µ—Ä–≤–æ–Ω–∏–π", "–¢–∞–π—Å—å–∫–∏–π –∑–µ–ª–µ–Ω–∏–π"],
        ["–ë–æ—Ä–Ω–µ–æ —á–µ—Ä–≤–æ–Ω–∏–π", "–ë—ñ–ª–∏–π –°–ª–æ–Ω"],
        ["–®–∏–≤–∞", "White Honey"],
        ["–ë–æ–≥–∏–Ω—è –ö–∞–ª—ñ", "Golden Dragon"],
    ]
    reply_markup = ReplyKeyboardMarkup(options_matrix,one_time_keyboard=True,input_field_placeholder="–°–æ—Ä—Ç",resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id,text='–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ä—Ç',reply_markup=reply_markup)
    return VARIETY

async def variety_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    options_matrix = [["10 –≥","25 –≥"],["50 –≥","100 –≥"],["1 –∫–≥"]]
    reply_markup = ReplyKeyboardMarkup(options_matrix,one_time_keyboard=True,resize_keyboard=True)
    user = update.message.from_user
    variety = update.message.text
    context.user_data["variety"] = variety
    logger.info("%s selected variety : %s", user.first_name, variety)
    await update.message.reply_text(
        "‚öñÔ∏é –û–±–µ—Ä—ñ—Ç—å –≤–∞–≥—É —É–ø–∞–∫–æ–≤–∫–∏",
        reply_markup=reply_markup,
    )
    return GRAMMS

async def gramms_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    gramms = update.message.text
    context.user_data["gramms"] = gramms
    logger.info("%s selected %s gramms", user.first_name, gramms)
    await update.message.reply_text(
        "–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–ø–∞–∫–æ–≤–æ–∫",
        reply_markup=ReplyKeyboardRemove(),
    )
    return PACKAGE
    
async def package_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫","–ù—ñ"]],one_time_keyboard=True,resize_keyboard=True)
    package = update.message.text
    context.user_data["package"] = package
    user = update.message.from_user
    logger.info("%s selected %s package", user.first_name, package)
    await update.message.reply_text(
        "–§–æ—Ä–º–∞: "+context.user_data["type"] + "\n"+
        "–°–æ—Ä—Ç: "+context.user_data["variety"] + "\n"+
        "–í–∞–≥–∞: "+context.user_data["gramms"] + "\n"+
        "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–ø–∞–∫–æ–≤–æ–∫: "+context.user_data["package"] + "\n"+
        "–í—Å–µ –≤–∫–∞–∑–∞–Ω–æ –≤—ñ—Ä–Ω–æ ?",
        reply_markup=reply_markup,
    )
    return ORDER_CORRECT

async def is_oreder_correct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫","–ù—ñ"]],one_time_keyboard=True,resize_keyboard=True)
    if update.message.text == "–¢–∞–∫":
        with Session(engine) as session:
            if context.user_data["ordersid"] == 0:
                uid = session.query(User.id).where(User.userid.in_([str(update.message.from_user.id)])).first()[0]
                times = int(time.time())
                tmp = Orders(time = times,user_id=uid)
                session.add(tmp)
                session.commit()
                context.user_data["ordersid"] = session.query(Orders.id).where(Orders.time.in_([times])).first()[0]

            tmpoe = OrderElements(tea=context.user_data["variety"],weight=context.user_data["gramms"],amount=context.user_data["package"],type=context.user_data["type"],order_id=context.user_data["ordersid"])
            
            session.add_all([tmpoe])
            session.commit()

        await update.message.reply_text("–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω —Å–æ—Ä—Ç ?", reply_markup=reply_markup)
        return ONE_MORE
    else:
        return await choose_type(update,context) 
    
async def one_more_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–¢–∞–∫":
        return await choose_type(update,context)
    else:
        await update.message.reply_text("üì¶ –û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤–∞—Å –≤–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏\n\nüö∂ –°–∞–º–æ–≤–∏–≤—ñ–∑\n–í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Å–æ–±–∏—Å—Ç–æ –∑–∞–±—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –∑—Ä—É—á–Ω–∏–π –¥–ª—è –í–∞—Å —á–∞—Å —É –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É (11:00 - 18:00).\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—à—Ç–æ—é\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è –∑–∞ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏.",
            reply_markup=ReplyKeyboardMarkup([local_or_delivery_list],one_time_keyboard=True,input_field_placeholder="",resize_keyboard=True)
        )
        return LOCALORDELIVERY
    
async def local_or_delivery(update: Update,context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫","–ù—ñ"]],one_time_keyboard=True,resize_keyboard=True)
    lod = update.message.text
    if(lod == local_or_delivery_list[0]):
        return await local(update,context)
    else:
        with Session(engine) as session:
            user = session.query(User).where(User.userid.in_([str(update.message.from_user.id)])).first()
        if user.name != None:
            await update.message.reply_text(f"{user}")
            await update.message.reply_text("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ ?", reply_markup=reply_markup)
            return ASK_UPDATE_PERSONAL
        else:
            return await personal_info_name(update,context)

async def ask_update_personal(update: Update,context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–¢–∞–∫":
        await update.message.reply_text("–©–∏—Ä–æ –¥—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è !",
            reply_markup=start_reply_markup)
        return CHECK
    else:
        return await personal_info_name(update,context) 

async def local(update: Update,context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        contact_info,
        reply_markup=start_reply_markup
    )
    return CHECK

async def personal_info_name(update: Update,context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è", reply_markup=ReplyKeyboardRemove())
    return PERSONAL_SURNAME

async def personal_info_surname(update: Update,context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data["name"] = name
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ")
    return PERSONAL_PHONE

async def personal_info_phone(update: Update,context: ContextTypes.DEFAULT_TYPE):
    surname = update.message.text
    context.user_data["surname"] = surname
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    return PERSONAL_CITY

async def personal_info_city(update: Update,context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data["phone"] = phone
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ")
    return PERSONAL_POST_TYPE

async def personal_info_post_type(update: Update,context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([post_type_list],resize_keyboard=True)
    city = update.message.text
    context.user_data["city"] = city
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ü–æ—á—Ç–æ–º–∞—Ç –∞–±–æ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è",reply_markup=reply_markup)
    return PERSONAL_POST_TYPE_CHOOSE
    
async def personal_info_post_type_choose(update: Update,context: ContextTypes.DEFAULT_TYPE):
    post_type = update.message.text
    context.user_data["post_type"] = post_type
    await update.message.reply_text(f'–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä {"–ø–æ—á—Ç–æ–º–∞—Ç—É" if post_type == post_type_list[0] else "–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"} (–¢—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ)',reply_markup=ReplyKeyboardRemove())
    return PERSONAL_POST_NUMBER

async def personal_info_post_number(update: Update,context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫","–ù—ñ"]],one_time_keyboard=True,resize_keyboard=True)
    post_number = update.message.text
    userid = update.message.from_user.id
    context.user_data["post_number"] = post_number
    user = User(name=context.user_data["name"],surname=context.user_data["surname"],phone=context.user_data["phone"],city=context.user_data["city"],post_type=context.user_data["post_type"],post_number=post_number)
    await update.message.reply_text(
        f"{user}\n–í—Å–µ –≤–∫–∞–∑–∞–Ω–æ –≤—ñ—Ä–Ω–æ ?",
        reply_markup=reply_markup,
    )
    return PERSONAL_INFO_CORRECT

async def is_personal_info_correct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–¢–∞–∫":
        with Session(engine) as session:
            user = session.query(User).where(User.userid.in_([str(update.message.from_user.id)])).first()
            user.name = context.user_data["name"]
            user.surname = context.user_data["surname"]
            user.phone = context.user_data["phone"]
            user.city = context.user_data["city"]
            user.post_type = context.user_data["post_type"]
            user.post_number = context.user_data["post_number"]
            session.commit()
        context.user_data["ordersid"] = 0
        await update.message.reply_text("–©–∏—Ä–æ –¥—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è !",
            reply_markup=start_reply_markup)
        return CHECK
    else:
        return await personal_info_name(update,context) 

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ordersid"] = 0
    await context.bot.send_message(update.effective_chat.id, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ')

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(ConversationHandler(
        entry_points=[CommandHandler(["start","hello"], start),[MessageHandler(filters.Regex(gen_regex(menu_list)),check_menu)]],
        states={
            CHECK: [MessageHandler(filters.Regex(gen_regex(menu_list)),check_menu)],
            TEA: [MessageHandler(filters.TEXT,choose_tea)],
            VARIETY: [MessageHandler(filters.Regex(gen_regex(variety_dict["UA"])), variety_select)],
            GRAMMS: [MessageHandler(filters.Regex(gen_regex(gramms_list)), gramms_select)],
            PACKAGE: [MessageHandler(filters.Regex("^[0-9]+$"),package_select)],
            ORDER_CORRECT:[MessageHandler(filters.Regex(gen_regex(["–¢–∞–∫","–ù—ñ"])),is_oreder_correct)],
            LOCALORDELIVERY:[MessageHandler(filters.Regex(gen_regex(local_or_delivery_list)),local_or_delivery)],
            PERSONAL_INFO:[MessageHandler(filters.TEXT,personal_info_name)],
            PERSONAL_SURNAME:[MessageHandler(filters.TEXT,personal_info_surname)],
            PERSONAL_PHONE:[MessageHandler(filters.TEXT,personal_info_phone)],            
            PERSONAL_CITY:[MessageHandler(filters.TEXT,personal_info_city)],
            PERSONAL_POST_TYPE:[MessageHandler(filters.TEXT,personal_info_post_type)],
            PERSONAL_POST_TYPE_CHOOSE:[MessageHandler(filters.Regex(gen_regex(post_type_list)),personal_info_post_type_choose)],
            PERSONAL_POST_NUMBER:[MessageHandler(filters.Regex("^[0-9]+$"),personal_info_post_number)],
            PERSONAL_INFO_CORRECT:[MessageHandler(filters.Regex(gen_regex(["–¢–∞–∫","–ù—ñ"])),is_personal_info_correct)],
            ASK_UPDATE_PERSONAL:[MessageHandler(filters.Regex(gen_regex(["–¢–∞–∫","–ù—ñ"])),ask_update_personal)],
            ONE_MORE:[MessageHandler(filters.Regex(gen_regex(["–¢–∞–∫","–ù—ñ"])),one_more_ask)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
)
app.run_polling()